{"version":3,"sources":["images/commentIcon.png","images/closeIcon.png","images/menuIcon.png","serviceWorker.js","App/components/Form/Form.js","App/components/Jokes/Joke.js","App/components/FavouriteLink/FavouriteLink.js","App/App.js","App/actions/actionCreator.js","constants.js","App/reducers/jokes.js","App/store.js","App/reducers/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Form","state","categories","change_activeCategory","this","props","fetch","then","response","json","data","setState","catch","error","activeSelectRadio","activeCategory","searchValue","change_activeSelectRadio","change_searchValue","addJoke","className","type","name","value","onChange","checked","map","category","key","onClick","placeholder","Component","defaultProps","Joke","id","updated_at","url","isFavourite","change_isFavourite","updateDate","Date","parse","dateNow","date","Math","floor","src","require","alt","href","data-title","length","catgory","FavouriteLink","useState","isOpenFavourite","setIsOpenFavourite","showFavouriteJokes","document","body","querySelector","classList","toggle","App","jokes","target","fetchData","fetchURL","console","log","favouriteJokes","check_isFavourite","findIndex","result","alert","addJokesByButton","event","preventDefault","number","joke","connect","store","JOKES","load","namespace","preloadedState","favouriteNumber","unshift","splice","rootReducer","combineReducers","composeEnhancers","compose","createStore","applyMiddleware","save","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7896a2ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/commentIcon.8f33806e.png\";","module.exports = __webpack_public_path__ + \"static/media/closeIcon.09d6d5da.png\";","module.exports = __webpack_public_path__ + \"static/media/menuIcon.d353f6c8.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Form.scss\";\r\n\r\nexport class Form extends Component {\r\n  static propTypes = {\r\n    activeSelectRadio: PropTypes.string,\r\n    activeCategory: PropTypes.string,\r\n    searchValue: PropTypes.string,\r\n    change_activeCategory: PropTypes.func,\r\n    change_activeSelectRadio: PropTypes.func,\r\n    change_searchValue: PropTypes.func,\r\n    addJoke: PropTypes.func,\r\n  };\r\n  static defaultProps = {\r\n    activeSelectRadio: \"random\",\r\n    activeCategory: \"\",\r\n    searchValue: \"\",\r\n    change_activeCategory: () => {},\r\n    change_activeSelectRadio: () => {},\r\n    change_searchValue: () => {},\r\n    addJoke: () => {},\r\n  };\r\n\r\n  state = {\r\n    categories: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { change_activeCategory } = this.props;\r\n    fetch(\"https://api.chucknorris.io/jokes/categories\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          categories: data,\r\n        });\r\n        change_activeCategory(data[0]);\r\n      })\r\n      .catch((error) => error);\r\n  }\r\n\r\n  render() {\r\n    const { categories } = this.state;\r\n    const {\r\n      activeSelectRadio,\r\n      activeCategory,\r\n      searchValue,\r\n      change_activeCategory,\r\n      change_activeSelectRadio,\r\n      change_searchValue,\r\n      addJoke,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"searchBlock_form\">\r\n        \r\n        <p className=\"msi\">MSI 2020</p>\r\n        <h2 className=\"hey\">Hey!</h2>\r\n        <h3 className=\"letsTry\">Let's try to find a joke for you:</h3>\r\n\r\n        <form className=\"searchForm\">\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"selectJoke\"\r\n              value=\"random\"\r\n              onChange={change_activeSelectRadio}\r\n              checked={activeSelectRadio === \"random\"}\r\n            />\r\n            Random\r\n          </label>\r\n          <br />\r\n\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"selectJoke\"\r\n              value=\"categories\"\r\n              onChange={change_activeSelectRadio}\r\n              checked={activeSelectRadio === \"categories\"}\r\n            />\r\n            From categories\r\n          </label>\r\n          <br />\r\n\r\n          {/* Block with Categories  */}\r\n          {activeSelectRadio === \"categories\" && (\r\n            <div className=\"jokesCategories_block\">\r\n              {categories.map((category) => (\r\n                <span\r\n                  key={category}\r\n                  className={\r\n                    activeCategory === category\r\n                      ? \"jokesCategories jokesCategories_active\"\r\n                      : \"jokesCategories\"\r\n                  }\r\n                  onClick={() => {\r\n                    change_activeCategory(category);\r\n                  }}\r\n                >\r\n                  {category}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"selectJoke\"\r\n              value=\"search\"\r\n              onChange={change_activeSelectRadio}\r\n              checked={activeSelectRadio === \"search\"}\r\n            />\r\n            Search\r\n          </label>\r\n          <br />\r\n\r\n          {activeSelectRadio === \"search\" && (\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Free text search...\"\r\n              value={searchValue}\r\n              onChange={change_searchValue}\r\n            />\r\n          )}\r\n\r\n          <button className=\"submitButton\" onClick={addJoke}>\r\n            Get a joke\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Jokes.scss\";\r\n\r\nconst Joke = ({\r\n  id,\r\n  category = [],\r\n  updated_at,\r\n  value,\r\n  url,\r\n  isFavourite,\r\n  change_isFavourite,\r\n}) => {\r\n  const updateDate = Date.parse(updated_at);\r\n  const dateNow = new Date();\r\n  const date = Math.floor((dateNow - updateDate) / 1000 / 60 / 60);\r\n\r\n  return (\r\n    <div className=\"joke\">\r\n      <i\r\n        className={isFavourite ? \"fas fa-heart\" : \"far fa-heart\"}\r\n        onClick={() => {\r\n          change_isFavourite(id);\r\n        }}\r\n      />\r\n\r\n      <div className=\"commentIcon\">\r\n        <img src={require(\"../../../images/commentIcon.png\")} alt=\"chat\" />\r\n      </div>\r\n\r\n      <div className=\"jokeTextBlock\">\r\n        <p className=\"jokeId\">\r\n          ID:\r\n          <a href={url} data-title=\"sdfdsf\">\r\n            {id}\r\n            <i className=\"fas fa-external-link-alt\"></i>\r\n          </a>\r\n        </p>\r\n\r\n        <p className=\"jokeText\">{value}</p>\r\n\r\n        <span className=\"jokeDate\">\r\n          Last update: <b>{date} hours ago</b>\r\n        </span>\r\n        {category.length !== 0 && (\r\n          <span className=\"jokeTrueCategory\">{category[0]}</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nJoke.propTypes = {\r\n  id: PropTypes.string,\r\n  catgory: PropTypes.string,\r\n  updated_at: PropTypes.string,\r\n  value: PropTypes.string,\r\n  url: PropTypes.string,\r\n  isFavourite: PropTypes.bool,\r\n};\r\nJoke.defaultProps = {\r\n  id: \"\",\r\n  catgory: \"\",\r\n  updated_at: \"\",\r\n  value: \"\",\r\n  url: \"\",\r\n  isFavourite: false,\r\n};\r\n\r\nexport default Joke;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport \"./FavouriteLink.scss\";\r\n\r\nconst FavouriteLink = () => {\r\n  const [isOpenFavourite, setIsOpenFavourite] = useState(false);\r\n\r\n  // Show || hide favouriteJokes block and change an icon\r\n  const showFavouriteJokes = () => {\r\n    document.body.querySelector(\".favouriteJokes\").classList.toggle(\"displayB\");\r\n\r\n    document.body.classList.toggle(\"overflowH\");\r\n\r\n    setIsOpenFavourite(!isOpenFavourite);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"favourite\">\r\n        <div className=\"mobileSpan\">\r\n          <img\r\n            src={\r\n              isOpenFavourite\r\n                ? require(\"../../../images/closeIcon.png\")\r\n                : require(\"../../../images/menuIcon.png\")\r\n            }\r\n            onClick={showFavouriteJokes}\r\n            alt=\"icon\"\r\n          />\r\n\r\n          <span onClick={showFavouriteJokes}>Favourite</span>\r\n        </div>\r\n\r\n        <span className=\"desktopSpan\">Favourite</span>\r\n      </div>\r\n\r\n      <div className=\"favourite_backgroundBlock\"></div>\r\n\r\n      {isOpenFavourite && (\r\n        <div className=\"opacityBlock\" onClick={showFavouriteJokes}></div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FavouriteLink;\r\n","import React, { Fragment, Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addJoke } from \"./actions/actionCreator\";\r\n\r\nimport Form from \"./components/Form/Form\";\r\nimport Joke from \"./components/Jokes/Joke\";\r\nimport FavouriteLink from \"./components/FavouriteLink/FavouriteLink\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    activeSelectRadio: \"random\",\r\n    activeCategory: \"\",\r\n    searchValue: \"\",\r\n    jokes: [],\r\n  };\r\n\r\n  change_activeSelectRadio = ({ target: { value } }) => {\r\n    this.setState({\r\n      activeSelectRadio: value,\r\n    });\r\n  };\r\n\r\n  change_activeCategory = (value) => {\r\n    this.setState({\r\n      activeCategory: value,\r\n    });\r\n  };\r\n\r\n  change_searchValue = ({ target: { value } }) => {\r\n    this.setState({\r\n      searchValue: value,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData(\"https://api.chucknorris.io/jokes/random\");\r\n  }\r\n\r\n  // make fetch request with url=fetchURL\r\n  fetchData = (fetchURL) => {\r\n    fetch(fetchURL)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        this.addJoke(data);\r\n      });\r\n  };\r\n\r\n  // adding new jokes to the MAIN block of jokes\r\n  addJoke = (data) => {\r\n    const { favouriteJokes } = this.props;\r\n\r\n    //Проверяем есть ли добавляемая шутка уже в блоке избранных если есть то отметить как избранную\r\n    const check_isFavourite = (data) => {\r\n      if (favouriteJokes.findIndex(({ id }) => id === data.id) !== -1) {\r\n        data.isFavourite = true;\r\n      } else {\r\n        data.isFavourite = false;\r\n      }\r\n    };\r\n\r\n    // если шуток несколько проверяем каждую шутку из массива на избранность и добавляем их\r\n    if (!!data.result) {\r\n      if (data.result.length === 0) {\r\n        alert(\"Nothing was found!\");\r\n      }\r\n      for (let i of data.result) {\r\n        check_isFavourite(i);\r\n      }\r\n\r\n      this.setState(({ jokes }) => ({\r\n        jokes: [...data.result],\r\n      }));\r\n    } else {\r\n      // делаем тоже самое но для 1 шутки\r\n      check_isFavourite(data);\r\n\r\n      this.setState(({ jokes }) => ({\r\n        jokes: [data],\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Adding new jokes by click on the button 'Get a joke'\r\n  addJokesByButton = (event) => {\r\n    event.preventDefault();\r\n    const { searchValue, activeCategory, activeSelectRadio } = this.state;\r\n\r\n    switch (activeSelectRadio) {\r\n      case \"random\":\r\n        this.fetchData(\"https://api.chucknorris.io/jokes/random\");\r\n        break;\r\n\r\n      case \"categories\":\r\n        this.fetchData(\r\n          `https://api.chucknorris.io/jokes/random?category=${activeCategory}`\r\n        );\r\n        break;\r\n\r\n      case \"search\":\r\n        if (searchValue.length >= 3 && searchValue.length <= 120) {\r\n          this.fetchData(\r\n            `https://api.chucknorris.io/jokes/search?query=${searchValue}`\r\n          );\r\n        } else {\r\n          alert(\"The number of characters must be between 3 and 120\");\r\n        }\r\n        break;\r\n\r\n      default:\r\n        this.fetchData(\"https://api.chucknorris.io/jokes/random\");\r\n    }\r\n\r\n    this.setState({\r\n      searchValue: \"\",\r\n    });\r\n  };\r\n\r\n  change_isFavourite = (id) => {\r\n    const { addJoke } = this.props;\r\n\r\n    this.setState(({ jokes }) => {\r\n      let number = jokes.findIndex((joke) => joke.id === id);\r\n\r\n      if (number !== -1) {\r\n        jokes[number].isFavourite = !jokes[number].isFavourite;\r\n      }\r\n      // add jokes in favouriteJokes block\r\n      addJoke(id, jokes[number]);\r\n\r\n      return {\r\n        jokes: jokes,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      activeSelectRadio,\r\n      activeCategory,\r\n      searchValue,\r\n      jokes,\r\n    } = this.state;\r\n    const { favouriteJokes } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <main className=\"main\">\r\n          <div className=\"main_wrapper\">\r\n            <Form\r\n              activeSelectRadio={activeSelectRadio}\r\n              activeCategory={activeCategory}\r\n              searchValue={searchValue}\r\n              change_activeSelectRadio={this.change_activeSelectRadio}\r\n              change_activeCategory={this.change_activeCategory}\r\n              change_searchValue={this.change_searchValue}\r\n              addJoke={this.addJokesByButton}\r\n            />\r\n\r\n            <div className=\"jokes\">\r\n              {jokes.map(\r\n                ({ categories, id, updated_at, url, value, isFavourite }) => {\r\n                  return (\r\n                    <Joke\r\n                      key={id}\r\n                      id={id}\r\n                      category={categories}\r\n                      updated_at={updated_at}\r\n                      value={value}\r\n                      url={url}\r\n                      isFavourite={isFavourite}\r\n                      change_isFavourite={this.change_isFavourite}\r\n                    />\r\n                  );\r\n                }\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"favouriteJokes\">\r\n            <div className=\"jokes\">\r\n              {favouriteJokes.map(\r\n                ({ categories, id, updated_at, url, value, isFavourite }) => (\r\n                  <Joke\r\n                    key={id}\r\n                    id={id}\r\n                    category={categories}\r\n                    updated_at={updated_at}\r\n                    value={value}\r\n                    url={url}\r\n                    isFavourite={isFavourite}\r\n                    change_isFavourite={this.change_isFavourite}\r\n                  />\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <FavouriteLink />\r\n        </main>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (store) => ({\r\n    favouriteJokes: store.favouriteJokes,\r\n  }),\r\n  { addJoke }\r\n)(App);\r\n","import { ADD_JOKE } from \"../../constants\";\r\n\r\nexport const addJoke = (id, joke) => {\r\n  return {\r\n    type: ADD_JOKE,\r\n    id,\r\n    joke,\r\n  };\r\n};\r\n","export const ADD_JOKE = \"ADD_JOKE\";\r\n","import { ADD_JOKE } from \"../../constants\";\r\nimport { load } from \"redux-localstorage-simple\";\r\n\r\nlet JOKES = load({ namespace: \"favourite-jokes\" });\r\n\r\nif (!JOKES || !JOKES.favouriteJokes || !JOKES.favouriteJokes.length) {\r\n  JOKES = {\r\n    favouriteJokes: [],\r\n  };\r\n}\r\n\r\nconst favouriteJokes = (state = JOKES.favouriteJokes, { id, joke, type }) => {\r\n  switch (type) {\r\n    case ADD_JOKE: {\r\n      //проверяем есть лм в блоке FavouriteJokes шутка с данным id\r\n      let favouriteNumber = state.findIndex((joke) => joke.id === id);\r\n\r\n      // если ее нет- добавить, если есть- удалить\r\n      if (favouriteNumber === -1) {\r\n        state.unshift(joke);\r\n      } else {\r\n        state.splice(favouriteNumber, 1);\r\n      }\r\n\r\n      return [...state];\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default favouriteJokes;\r\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/index\";\r\nimport { save } from \"redux-localstorage-simple\";\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== \"production\" &&\r\n  typeof window === \"object\" &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n/* eslint-enable */\r\n\r\nconst configureStore = (preloadedState) =>\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(applyMiddleware(save({ namespace: \"favourite-jokes\" })))\r\n  );\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;\r\n","import { combineReducers } from \"redux\";\r\nimport favouriteJokes from \"./jokes\";\r\n\r\nconst rootReducer = combineReducers({ favouriteJokes });\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport App from \"./App/App\";\r\nimport \"./styles/reset.css\";\r\nimport \"./index.scss\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./App/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App /> \r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}