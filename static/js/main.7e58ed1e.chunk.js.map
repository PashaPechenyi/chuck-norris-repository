{"version":3,"sources":["images/commentIcon.png","images/closeIcon.png","images/menuIcon.png","serviceWorker.js","App/components/Form/Form.jsx","App/components/Jokes/Joke.jsx","App/components/FavouriteLink/FavouriteLink.jsx","App/containers/App/App.jsx","App/actions/actionCreator.js","App/constants.js","App/reducers/favouriteJokes.js","App/store.js","App/reducers/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Form","activeSelectRadio","activeCategory","searchValue","change_activeCategory","change_activeSelectRadio","change_searchValue","addJoke","useState","categories","setCategories","useEffect","fetch","then","response","json","data","catch","error","className","type","name","value","onChange","checked","map","category","key","onClick","placeholder","defaultProps","Joke","id","updated_at","url","isFavourite","change_isFavourite","updateDate","Date","parse","dateNow","date","Math","floor","src","require","alt","href","data-title","length","catgory","React","memo","isOpenFavourite","setIsOpenFavourite","showFavouriteJokes","document","body","querySelector","classList","toggle","connect","store","favouriteJokes","addFavouriteJoke","joke","setActiveSelectRadio","setActiveCategory","setSearchValue","jokes","setJokes","fetchData","fetchURL","result","alert","check_isFavourite","findIndex","change_isFavouriteCallback","useCallback","a","number","activeFavouriteJoke","target","event","preventDefault","JOKES","load","namespace","preloadedState","state","favouriteNumber","unshift","splice","rootReducer","combineReducers","composeEnhancers","compose","createStore","applyMiddleware","save","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7e58ed1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/commentIcon.8f33806e.png\";","module.exports = __webpack_public_path__ + \"static/media/closeIcon.09d6d5da.png\";","module.exports = __webpack_public_path__ + \"static/media/menuIcon.d353f6c8.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Form.scss\";\r\n\r\nconst Form = ({\r\n  activeSelectRadio,\r\n  activeCategory,\r\n  searchValue,\r\n  change_activeCategory,\r\n  change_activeSelectRadio,\r\n  change_searchValue,\r\n  addJoke,\r\n}) => {\r\n  //downloading all categories\r\n  const [categories, setCategories] = useState(null);\r\n  useEffect(() => {\r\n    fetch(\"https://api.chucknorris.io/jokes/categories\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCategories(data);\r\n\r\n        change_activeCategory(data[0]);\r\n      })\r\n      .catch((error) => error);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"searchBlock_form\">\r\n      <p className=\"msi\">MSI 2020</p>\r\n      <h2 className=\"hey\">Hey!</h2>\r\n      <h3 className=\"letsTry\">Let's try to find a joke for you:</h3>\r\n\r\n      <form className=\"searchForm\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"selectJoke\"\r\n            value=\"random\"\r\n            onChange={change_activeSelectRadio}\r\n            checked={activeSelectRadio === \"random\"}\r\n          />\r\n          Random\r\n        </label>\r\n        <br />\r\n\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"selectJoke\"\r\n            value=\"categories\"\r\n            onChange={change_activeSelectRadio}\r\n            checked={activeSelectRadio === \"categories\"}\r\n          />\r\n          From categories\r\n        </label>\r\n        <br />\r\n\r\n        {/* Block with Categories  */}\r\n        {activeSelectRadio === \"categories\" && (\r\n          <div className=\"jokesCategories_block\">\r\n            {categories.map((category) => (\r\n              <span\r\n                key={category}\r\n                className={\r\n                  activeCategory === category\r\n                    ? \"jokesCategories jokesCategories_active\"\r\n                    : \"jokesCategories\"\r\n                }\r\n                onClick={() => {\r\n                  change_activeCategory(category);\r\n                }}\r\n              >\r\n                {category}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"selectJoke\"\r\n            value=\"search\"\r\n            onChange={change_activeSelectRadio}\r\n            checked={activeSelectRadio === \"search\"}\r\n          />\r\n          Search\r\n        </label>\r\n        <br />\r\n\r\n        {activeSelectRadio === \"search\" && (\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Free text search...\"\r\n            value={searchValue}\r\n            onChange={change_searchValue}\r\n          />\r\n        )}\r\n\r\n        <button className=\"submitButton\" onClick={addJoke}>\r\n          Get a joke\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  activeSelectRadio: PropTypes.string,\r\n  activeCategory: PropTypes.string,\r\n  searchValue: PropTypes.string,\r\n  change_activeCategory: PropTypes.func,\r\n  change_activeSelectRadio: PropTypes.func,\r\n  change_searchValue: PropTypes.func,\r\n  addJoke: PropTypes.func,\r\n};\r\nForm.defaultProps = {\r\n  activeSelectRadio: \"random\",\r\n  activeCategory: \"\",\r\n  searchValue: \"\",\r\n  change_activeCategory: () => {},\r\n  change_activeSelectRadio: () => {},\r\n  change_searchValue: () => {},\r\n  addJoke: () => {},\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Jokes.scss\";\r\n\r\nconst Joke = ({\r\n  id,\r\n  category = [],\r\n  updated_at,\r\n  value,\r\n  url,\r\n  isFavourite,\r\n  change_isFavourite,\r\n}) => {\r\n  const updateDate = Date.parse(updated_at);\r\n  const dateNow = new Date();\r\n  const date = Math.floor((dateNow - updateDate) / 1000 / 60 / 60);\r\n\r\n  return (\r\n    <div className=\"joke\">\r\n      <i\r\n        className={isFavourite ? \"fas fa-heart\" : \"far fa-heart\"}\r\n        onClick={() => {\r\n          change_isFavourite(id);\r\n        }}\r\n      />\r\n\r\n      <div className=\"commentIcon\">\r\n        <img src={require(\"../../../images/commentIcon.png\")} alt=\"chat\" />\r\n      </div>\r\n\r\n      <div className=\"jokeTextBlock\">\r\n        <p className=\"jokeId\">\r\n          ID:\r\n          <a href={url} data-title=\"sdfdsf\">\r\n            {id}\r\n            <i className=\"fas fa-external-link-alt\"></i>\r\n          </a>\r\n        </p>\r\n\r\n        <p className=\"jokeText\">{value}</p>\r\n\r\n        <span className=\"jokeDate\">\r\n          Last update: <b>{date} hours ago</b>\r\n        </span>\r\n        {category.length !== 0 && (\r\n          <span className=\"jokeTrueCategory\">{category[0]}</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nJoke.propTypes = {\r\n  id: PropTypes.string,\r\n  catgory: PropTypes.string,\r\n  updated_at: PropTypes.string,\r\n  value: PropTypes.string,\r\n  url: PropTypes.string,\r\n  isFavourite: PropTypes.bool,\r\n};\r\nJoke.defaultProps = {\r\n  id: \"\",\r\n  catgory: \"\",\r\n  updated_at: \"\",\r\n  value: \"\",\r\n  url: \"\",\r\n  isFavourite: false,\r\n};\r\n\r\nexport default React.memo(Joke);\r\n","import React, { Fragment, useState } from \"react\";\r\nimport \"./FavouriteLink.scss\";\r\n\r\nconst FavouriteLink = () => {\r\n  const [isOpenFavourite, setIsOpenFavourite] = useState(false);\r\n\r\n  // Show || hide favouriteJokes block and change an icon\r\n  const showFavouriteJokes = () => {\r\n    document.body.querySelector(\".favouriteJokes\").classList.toggle(\"displayB\");\r\n\r\n    document.body.classList.toggle(\"overflowH\");\r\n\r\n    setIsOpenFavourite(!isOpenFavourite);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"favourite\">\r\n        <div className=\"mobileSpan\">\r\n          <img\r\n            src={\r\n              isOpenFavourite\r\n                ? require(\"../../../images/closeIcon.png\")\r\n                : require(\"../../../images/menuIcon.png\")\r\n            }\r\n            onClick={showFavouriteJokes}\r\n            alt=\"icon\"\r\n          />\r\n\r\n          <span onClick={showFavouriteJokes}>Favourite</span>\r\n        </div>\r\n\r\n        <span className=\"desktopSpan\">Favourite</span>\r\n      </div>\r\n\r\n      <div className=\"favourite_backgroundBlock\"></div>\r\n\r\n      {isOpenFavourite && (\r\n        <div className=\"opacityBlock\" onClick={showFavouriteJokes}></div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(FavouriteLink);\r\n","import React, { Fragment, useState, useEffect, useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addFavouriteJoke } from \"../../actions/actionCreator\";\r\n\r\nimport \"./App.scss\";\r\n\r\nimport Form from \"../../components/Form/Form\";\r\nimport Joke from \"../../components/Jokes/Joke\";\r\nimport FavouriteLink from \"../../components/FavouriteLink/FavouriteLink\";\r\n\r\nconst App = ({ addFavouriteJoke, favouriteJokes }) => {\r\n  const [activeSelectRadio, setActiveSelectRadio] = useState(\"random\");\r\n  const change_activeSelectRadio = ({ target: { value } }) => {\r\n    setActiveSelectRadio(value);\r\n  };\r\n\r\n  const [activeCategory, setActiveCategory] = useState(\"\");\r\n  const change_activeCategory = (value) => {\r\n    setActiveCategory(value);\r\n  };\r\n\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const change_searchValue = ({ target: { value } }) => {\r\n    setSearchValue(value);\r\n  };\r\n\r\n  const [jokes, setJokes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchData(\"https://api.chucknorris.io/jokes/random\");\r\n  }, []);\r\n\r\n  // make fetch request with url=fetchURL\r\n  function fetchData(fetchURL) {\r\n    fetch(fetchURL)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        addJoke(data);\r\n      });\r\n  }\r\n\r\n  // adding new jokes to the MAIN block of jokes\r\n  function addJoke(data) {\r\n    // если шуток несколько проверяем каждую шутку из массива на избранность и добавляем их\r\n    if (!!data.result) {\r\n      if (data.result.length === 0) {\r\n        alert(\"Nothing was found!\");\r\n      } else {\r\n        for (let i of data.result) {\r\n          check_isFavourite(i);\r\n        }\r\n      }\r\n\r\n      setJokes([...data.result]);\r\n    } else {\r\n      // делаем тоже самое но для 1 шутки\r\n      check_isFavourite(data);\r\n\r\n      setJokes([data]);\r\n    }\r\n  }\r\n\r\n  //Проверяем есть ли добавляемая шутка уже в блоке избранных если есть то отметить как избранную\r\n  function check_isFavourite(data) {\r\n    if (favouriteJokes.findIndex(({ id }) => id === data.id) !== -1) {\r\n      data.isFavourite = true;\r\n    } else {\r\n      data.isFavourite = false;\r\n    }\r\n  }\r\n\r\n  // Adding new jokes by click on the button 'Get a joke'\r\n  const addJokesByButton = (event) => {\r\n    event.preventDefault();\r\n\r\n    switch (activeSelectRadio) {\r\n      case \"random\":\r\n        fetchData(\"https://api.chucknorris.io/jokes/random\");\r\n        break;\r\n\r\n      case \"categories\":\r\n        fetchData(\r\n          `https://api.chucknorris.io/jokes/random?category=${activeCategory}`\r\n        );\r\n        break;\r\n\r\n      case \"search\":\r\n        if (searchValue.length >= 3 && searchValue.length <= 120) {\r\n          fetchData(\r\n            `https://api.chucknorris.io/jokes/search?query=${searchValue}`\r\n          );\r\n        } else {\r\n          alert(\"The number of characters must be between 3 and 120\");\r\n        }\r\n        break;\r\n\r\n      default:\r\n        fetchData(\"https://api.chucknorris.io/jokes/random\");\r\n    }\r\n\r\n    setSearchValue(\"\");\r\n  };\r\n\r\n  const change_isFavouriteCallback = useCallback(\r\n    async function change_isFavourite(id) {\r\n      let activeFavouriteJoke;\r\n\r\n      await setJokes((jokes) => {\r\n        let number = jokes.findIndex((joke) => joke.id === id);\r\n        activeFavouriteJoke = jokes[number];\r\n\r\n        if (number !== -1) {\r\n          activeFavouriteJoke.isFavourite = !activeFavouriteJoke.isFavourite;\r\n        }\r\n\r\n        return jokes;\r\n      });\r\n\r\n      // add jokes in favouriteJokes block\r\n      addFavouriteJoke(id, activeFavouriteJoke);\r\n    },\r\n    [setJokes, addFavouriteJoke]\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <main className=\"main\">\r\n        <div className=\"main_wrapper\">\r\n          <Form\r\n            activeSelectRadio={activeSelectRadio}\r\n            activeCategory={activeCategory}\r\n            searchValue={searchValue}\r\n            change_activeSelectRadio={change_activeSelectRadio}\r\n            change_activeCategory={change_activeCategory}\r\n            change_searchValue={change_searchValue}\r\n            addJoke={addJokesByButton}\r\n          />\r\n\r\n          <div className=\"jokes\">\r\n            {jokes.map(\r\n              ({ categories, id, updated_at, url, value, isFavourite }) => {\r\n                return (\r\n                  <Joke\r\n                    key={id}\r\n                    id={id}\r\n                    category={categories}\r\n                    updated_at={updated_at}\r\n                    value={value}\r\n                    url={url}\r\n                    isFavourite={isFavourite}\r\n                    change_isFavourite={change_isFavouriteCallback}\r\n                  />\r\n                );\r\n              }\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"favouriteJokes\">\r\n          <div className=\"jokes\">\r\n            {favouriteJokes.map(\r\n              ({ categories, id, updated_at, url, value, isFavourite }) => (\r\n                <Joke\r\n                  key={id}\r\n                  id={id}\r\n                  category={categories}\r\n                  updated_at={updated_at}\r\n                  value={value}\r\n                  url={url}\r\n                  isFavourite={isFavourite}\r\n                  change_isFavourite={change_isFavouriteCallback}\r\n                />\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <FavouriteLink />\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (store) => ({\r\n    favouriteJokes: store.favouriteJokes,\r\n  }),\r\n  { addFavouriteJoke }\r\n)(App);\r\n","import { ADD_FAVOURITE_JOKE } from \"../constants\";\r\n\r\nexport const addFavouriteJoke = (id, joke) => {\r\n  return {\r\n    type: ADD_FAVOURITE_JOKE,\r\n    id,\r\n    joke,\r\n  };\r\n};\r\n","export const ADD_FAVOURITE_JOKE = \"ADD_FAVOURITE_JOKE\";\r\n","import { ADD_FAVOURITE_JOKE } from \"../constants\";\r\nimport { load } from \"redux-localstorage-simple\";\r\n\r\nlet JOKES = load({ namespace: \"favourite-jokes\" });\r\n\r\nif (!JOKES || !JOKES.favouriteJokes || !JOKES.favouriteJokes.length) {\r\n  JOKES = {\r\n    favouriteJokes: [],\r\n  };\r\n}\r\n\r\nconst favouriteJokes = (state = JOKES.favouriteJokes, { id, joke, type }) => {\r\n  switch (type) {\r\n    case ADD_FAVOURITE_JOKE: {\r\n      //проверяем есть лм в блоке FavouriteJokes шутка с данным id\r\n      let favouriteNumber = state.findIndex((joke) => joke.id === id);\r\n\r\n      // если ее нет- добавить, если есть- удалить\r\n      if (favouriteNumber === -1) {\r\n        state.unshift(joke);\r\n      } else {\r\n        state.splice(favouriteNumber, 1);\r\n      }\r\n\r\n      return [...state];\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default favouriteJokes;\r\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/index\";\r\nimport { save } from \"redux-localstorage-simple\";\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== \"production\" &&\r\n  typeof window === \"object\" &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n/* eslint-enable */\r\n\r\nconst configureStore = (preloadedState) =>\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(applyMiddleware(save({ namespace: \"favourite-jokes\" })))\r\n  );\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;\r\n","import { combineReducers } from \"redux\";\r\nimport favouriteJokes from \"./favouriteJokes\";\r\n\r\nconst rootReducer = combineReducers({ favouriteJokes });\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport App from \"./App/containers/App/App.jsx\";\r\nimport \"./ownStyles/reset.css\";\r\nimport \"./index.scss\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./App/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}